<?php

namespace App\Services\Report;

/**
 * Transformer: INTERNAL ‚Üí PUBLIC
 * 
 * Przekszta≈Çca techniczne dane raportu (score, metryki, progi)
 * w miƒôkkƒÖ, percepcyjnƒÖ prezentacjƒô dla klienta.
 * 
 * NIE ZMIENIA algorytmu obliczeniowego - tylko spos√≥b prezentacji.
 */
class ReportPublicTransformer
{
    /**
     * Transformuj techniczny raport na format PUBLIC
     * 
     * @param array $internalData Dane techniczne z Report model
     * @return array Format PUBLIC JSON
     */
    public static function transform(array $internalData): array
    {
        $components = $internalData['components'] ?? [];
        $query = $internalData['query'] ?? '';
        
        // Oce≈Ñ status ka≈ºdego filaru
        $pillars = [
            self::evaluateZaufanie($components),
            self::evaluateRelewancja($components),
            self::evaluateObecnosc($components),
            self::evaluatePrezentacja($components),
            self::evaluateSpojosc($components),
        ];
        
        // Okre≈õl badge na podstawie status√≥w
        $badge = self::determineBadge($pillars);
        
        // Dobierz modu≈Çy na podstawie s≈Çabych punkt√≥w
        $modules = self::recommendModules($pillars);
        
        return [
            'header' => [
                'title' => 'PrzeglƒÖd profilu Google Business',
                'subtitle' => "Zapytanie: ¬´{$query}¬ª",
                'badge' => $badge,
            ],
            'pillars' => $pillars,
            'recommended_modules' => $modules,
            'cta' => 'Zaproponujemy uk≈Çad modu≈Ç√≥w i harmonogram dzia≈Ça≈Ñ na kr√≥tkim callu (15 min).',
        ];
    }
    
    /**
     * Oce≈Ñ filar: Zaufanie
     * Mapuje: opinions + owner_replies + hours_url
     */
    private static function evaluateZaufanie(array $components): array
    {
        $scores = [];
        
        if (isset($components['opinions']) && !($components['opinions']['unknown'] ?? false)) {
            $scores[] = $components['opinions']['score'];
        }
        
        if (isset($components['owner_replies']) && !($components['owner_replies']['unknown'] ?? false)) {
            $scores[] = $components['owner_replies']['score'];
        }
        
        if (isset($components['hours_url']) && !($components['hours_url']['unknown'] ?? false)) {
            $scores[] = $components['hours_url']['score'];
        }
        
        $avgScore = !empty($scores) ? array_sum($scores) / count($scores) : 0;
        
        return [
            'name' => 'Zaufanie',
            'status' => self::getStatus($avgScore),
            'color' => self::getColor($avgScore),
            'insight' => self::getZaufanieInsight($avgScore),
        ];
    }
    
    /**
     * Oce≈Ñ filar: Relewancja
     * Mapuje: categories
     */
    private static function evaluateRelewancja(array $components): array
    {
        $score = 0;
        
        if (isset($components['categories']) && !($components['categories']['unknown'] ?? false)) {
            $score = $components['categories']['score'];
        }
        
        return [
            'name' => 'Relewancja',
            'status' => self::getStatus($score),
            'color' => self::getColor($score),
            'insight' => self::getRelewancjaInsight($score),
        ];
    }
    
    /**
     * Oce≈Ñ filar: Obecno≈õƒá
     * Mapuje: posts + photos (freshness)
     */
    private static function evaluateObecnosc(array $components): array
    {
        $scores = [];
        
        if (isset($components['posts']) && !($components['posts']['unknown'] ?? false)) {
            $scores[] = $components['posts']['score'];
        }
        
        if (isset($components['photos']) && !($components['photos']['unknown'] ?? false)) {
            $scores[] = $components['photos']['score'];
        }
        
        $avgScore = !empty($scores) ? array_sum($scores) / count($scores) : 0;
        
        return [
            'name' => 'Obecno≈õƒá',
            'status' => self::getStatus($avgScore),
            'color' => self::getColor($avgScore),
            'insight' => self::getObecnoscInsight($avgScore),
        ];
    }
    
    /**
     * Oce≈Ñ filar: Prezentacja
     * Mapuje: photos + description
     */
    private static function evaluatePrezentacja(array $components): array
    {
        $scores = [];
        
        if (isset($components['photos']) && !($components['photos']['unknown'] ?? false)) {
            $scores[] = $components['photos']['score'];
        }
        
        if (isset($components['description']) && !($components['description']['unknown'] ?? false)) {
            $scores[] = $components['description']['score'];
        }
        
        $avgScore = !empty($scores) ? array_sum($scores) / count($scores) : 0;
        
        return [
            'name' => 'Prezentacja',
            'status' => self::getStatus($avgScore),
            'color' => self::getColor($avgScore),
            'insight' => self::getPrezentacjaInsight($avgScore),
        ];
    }
    
    /**
     * Oce≈Ñ filar: Sp√≥jno≈õƒá
     * Mapuje: hours_url + nap
     */
    private static function evaluateSpojosc(array $components): array
    {
        $scores = [];
        
        if (isset($components['hours_url']) && !($components['hours_url']['unknown'] ?? false)) {
            $scores[] = $components['hours_url']['score'];
        }
        
        if (isset($components['nap']) && !($components['nap']['unknown'] ?? false)) {
            $scores[] = $components['nap']['score'];
        }
        
        $avgScore = !empty($scores) ? array_sum($scores) / count($scores) : 0;
        
        return [
            'name' => 'Sp√≥jno≈õƒá',
            'status' => self::getStatus($avgScore),
            'color' => self::getColor($avgScore),
            'insight' => self::getSpojnoscInsight($avgScore),
        ];
    }
    
    /**
     * Okre≈õl status na podstawie ≈õredniego score
     */
    private static function getStatus(float $score): string
    {
        if ($score < 2.5) {
            return 'üî¥ ryzyko';
        } elseif ($score < 4.0) {
            return 'üü† do wzmocnienia';
        } else {
            return 'üü¢ stabilnie';
        }
    }
    
    /**
     * Okre≈õl kolor na podstawie score
     */
    private static function getColor(float $score): string
    {
        if ($score < 2.5) {
            return '#f35023';
        } else {
            return '#ffb900';
        }
    }
    
    /**
     * Insight dla Zaufania
     */
    private static function getZaufanieInsight(float $score): string
    {
        if ($score < 2.5) {
            return 'Wybrane sygna≈Çy mogƒÖ os≈Çabiaƒá poczucie bezpiecze≈Ñstwa wyboru.';
        } elseif ($score < 4.0) {
            return 'Percepcja opieki posprzeda≈ºowej nie jest w pe≈Çni odczuwalna.';
        } else {
            return 'Sygna≈Çy wiarygodno≈õci dzia≈ÇajƒÖ stabilnie.';
        }
    }
    
    /**
     * Insight dla Relewancji
     */
    private static function getRelewancjaInsight(float $score): string
    {
        if ($score < 2.5) {
            return 'Dopasowanie do intencji jest ograniczone ‚Äî komunikat nie trafia szeroko.';
        } elseif ($score < 4.0) {
            return 'Dopasowanie tematyczne do intencji wyszukiwa≈Ñ jest czƒô≈õciowe.';
        } else {
            return 'Zakres tematyczny buduje trafne oczekiwania.';
        }
    }
    
    /**
     * Insight dla Obecno≈õci
     */
    private static function getObecnoscInsight(float $score): string
    {
        if ($score < 2.5) {
            return 'Rytm sygna≈Ç√≥w nie buduje wra≈ºenia bie≈ºƒÖcej aktywno≈õci.';
        } elseif ($score < 4.0) {
            return 'Rytm sygna≈Ç√≥w nie potwierdza bie≈ºƒÖcej aktywno≈õci marki.';
        } else {
            return 'Odczuwalna, regularna obecno≈õƒá w punktach styku.';
        }
    }
    
    /**
     * Insight dla Prezentacji
     */
    private static function getPrezentacjaInsight(float $score): string
    {
        if ($score < 2.5) {
            return 'Warstwa wizualno-opisowa nie tworzy sp√≥jnej narracji o warto≈õci oferty.';
        } elseif ($score < 4.0) {
            return 'Narracja wizualna i opis nie tworzƒÖ jeszcze kompletnej historii miejsca.';
        } else {
            return 'Warstwa prezentacji harmonijnie porzƒÖdkuje oczekiwania odbiorcy.';
        }
    }
    
    /**
     * Insight dla Sp√≥jno≈õci
     */
    private static function getSpojnoscInsight(float $score): string
    {
        if ($score < 2.5) {
            return 'Nie wszystkie punkty wiarygodno≈õci sk≈ÇadajƒÖ siƒô na pe≈Çny obraz kontaktu.';
        } elseif ($score < 4.0) {
            return 'Czƒô≈õƒá element√≥w porzƒÖdkowych wymaga ujednolicenia.';
        } else {
            return 'Kluczowe elementy porzƒÖdkujƒÖ proces decyzyjny bez tarƒá.';
        }
    }
    
    /**
     * Okre≈õl badge na podstawie status√≥w filar√≥w
     */
    private static function determineBadge(array $pillars): string
    {
        $redCount = 0;
        $orangeCount = 0;
        $greenCount = 0;
        
        foreach ($pillars as $pillar) {
            if (strpos($pillar['status'], 'üî¥') !== false) {
                $redCount++;
            } elseif (strpos($pillar['status'], 'üü†') !== false) {
                $orangeCount++;
            } else {
                $greenCount++;
            }
        }
        
        if ($redCount >= 2) {
            return 'Priorytet stabilizacji';
        } elseif ($orangeCount >= 3 && $redCount === 0) {
            return 'Profil do wzmocnienia w kluczowych obszarach';
        } elseif ($greenCount >= 3) {
            return 'Profil stabilny ‚Äî potencja≈Ç do skalowania';
        } else {
            return 'Profil do wzmocnienia w kluczowych obszarach';
        }
    }
    
    /**
     * Rekomenduj modu≈Çy na podstawie s≈Çabych filar√≥w
     */
    private static function recommendModules(array $pillars): array
    {
        $modules = [];
        $modulePool = [
            'Zaufanie' => ['Reputacja+', 'Sp√≥jno≈õƒá'],
            'Relewancja' => ['Semantyka'],
            'Obecno≈õƒá' => ['Puls Marki'],
            'Prezentacja' => ['Visual Story'],
            'Sp√≥jno≈õƒá' => ['Sp√≥jno≈õƒá'],
        ];
        
        foreach ($pillars as $pillar) {
            // Je≈õli filar nie jest zielony
            if (strpos($pillar['status'], 'üü¢') === false) {
                $pillarName = $pillar['name'];
                if (isset($modulePool[$pillarName])) {
                    foreach ($modulePool[$pillarName] as $module) {
                        if (!in_array($module, $modules)) {
                            $modules[] = $module;
                        }
                    }
                }
            }
        }
        
        // Ogranicz do 2-3 modu≈Ç√≥w
        return array_slice(array_unique($modules), 0, 3);
    }
}

